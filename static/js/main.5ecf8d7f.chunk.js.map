{"version":3,"sources":["Redux/Contacts/contacts-actions.js","Redux/Contacts/contacts-reduser.js","Redux/store.js","Redux/Contacts/contacts-operations.js","Components/ContactForm/ContactForm.styles.js","Components/ContactForm/ContactForm.js","Redux/Contacts/contacts-selectors.js","Components/ContactList/ContactListStyles.js","Components/ContactList/ContactList.js","Components/Filter/Filter.styles.js","Components/Filter/Filter.js","Components/App/App.styles.js","Components/App/App.js","index.js"],"names":["addContact","createAction","payload","name","number","id","getContacts","deleteContact","filterContacts","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","contactItems","createReducer","items","isLoading","error","contactsActions","state","filter","elem","_","combineReducers","store","configureStore","reducer","contacts","contactsReducer","axios","defaults","baseURL","Form","styled","form","Label","label","Btn","button","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","value","reset","onSubmit","preventDefault","find","contact","toLowerCase","alert","a","post","data","type","pattern","title","required","onChange","getAllContacts","getFilter","getFilteredContacts","createSelector","normalizedFilter","includes","ItemText","span","Item","li","ContactList","visibleContacts","useEffect","get","length","map","i","onClick","contactId","toString","delete","contactsOperations","Message","Filter","Container","div","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAEMA,EAAaC,YAAa,gBAAgB,YAC9C,MAAO,CACLC,QAAS,CACPC,KAHoE,EAAvBA,KAI7CC,OAJoE,EAAjBA,OAKnDC,GALoE,EAATA,QAU3DC,EAAcL,YAAa,gBAC3BM,EAAgBN,YAAa,mBAC7BO,EAAiBP,YAAa,mBAE9BQ,EAAuBR,YAAa,yBACpCS,EAAuBT,YAAa,yBACpCU,EAAqBV,YAAa,uBCTlCW,EAAeC,YANA,CACnBC,MAAO,GACPC,WAAW,EACXC,MAAO,KAGyB,mBAC/BC,GAA8B,SAACC,EAAD,OAAShB,EAAT,EAASA,QAAT,mBAAC,eAA0BgB,GAA3B,IAAkCJ,MAAM,YAAKZ,QAD5C,cAE/Be,GAA6B,SAACC,EAAD,OAAUhB,EAAV,EAAUA,QAAV,mBAAC,eAA6BgB,GAA9B,IAAqCJ,MAAM,GAAD,mBAAMI,EAAMJ,OAAZ,CAAmBZ,SAF3D,cAG/Be,GAAgC,SAACC,EAAD,OAAUhB,EAAV,EAAUA,QAAV,mBAAC,eAA6BgB,GAA9B,IAAqCJ,MAAOI,EAAMJ,MAAMK,QAAO,SAACC,GAAD,OAAUA,EAAKf,KAAOH,UAHtF,cAI/Be,GAAuC,SAAAC,GAAK,kCAAUA,GAAV,IAAiBH,WAAW,OAJzC,cAK/BE,GAAuC,SAAAC,GAAK,kCAAUA,GAAV,IAAiBH,WAAW,OALzC,cAM/BE,GAAqC,SAACC,EAAD,OAAShB,EAAT,EAASA,QAAT,mBAAC,eAA0BgB,GAA3B,IAAkCF,MAAOd,OAN/C,IAS5BiB,EAASN,YAAc,GAAD,eACzBI,GAAiC,SAACI,EAAD,YAAMnB,YAG3BoB,cAAgB,CAC7BV,eACAO,WCrBII,EAAQC,YAAe,CAC3BC,QAAS,CACPC,SAAUC,K,kDCFdC,IAAMC,SAASC,QAAU,wBAElB,I,gCCHDC,EAAOC,IAAOC,KAAV,0IAQJC,EAAQF,IAAOG,MAAV,yJASLC,EAAMJ,IAAOK,OAAV,wI,OC0DMC,EAvEK,WAClB,MAAwBC,mBAAS,IAAjC,mBAAOpC,EAAP,KAAaqC,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOnC,EAAP,KAAeqC,EAAf,KAEMf,EAAWgB,aAAY,SAACxB,GAAD,OAAWA,EAAMQ,SAASd,aAAaE,SAE9D6B,EAAWC,cAEXC,EAAe,SAACC,GACpB,MAAwBA,EAAEC,OAAlB5C,EAAR,EAAQA,KAAM6C,EAAd,EAAcA,MACd,OAAQ7C,GACN,IAAK,OACHqC,EAAQQ,GACR,MACF,IAAK,SACHP,EAAUO,GACV,MACF,QACE,SAiBAC,EAAQ,WACZT,EAAQ,IACRC,EAAU,KAGZ,OACE,eAACV,EAAD,CAAMmB,SAnBa,SAACJ,GAGpB,GAFAA,EAAEK,iBAEEzB,EAAS0B,MAAK,SAACC,GAAD,OAAaA,EAAQlD,KAAKmD,gBAAkBnD,EAAKmD,iBAGjE,OAFAC,MAAM,GAAD,OAAIpD,EAAJ,iCACL8C,IFhB2B,IAACI,EEoB9BV,GFpB8BU,EEoBgB,CAAElD,OAAMC,UFpBzB,uCAAa,WAAMuC,GAAN,iBAAAa,EAAA,6DAC1Cb,EAAS1B,KADiC,kBAIfW,IAAM6B,KAAK,YAAaJ,GAJT,gBAI9BK,EAJ8B,EAI9BA,KACRf,EAAS1B,EAA2ByC,IACpCf,EAAS1B,KAN6B,kDAQtC0B,EAAS1B,EAAA,OAR6B,0DAAb,wDEqB7BgC,KASA,UACE,eAACf,EAAD,kBAEE,uBACEyB,KAAK,OACLxD,KAAK,OACLyD,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUlB,EACVG,MAAO7C,OAGX,eAAC+B,EAAD,oBAEE,uBACEyB,KAAK,MACLxD,KAAK,SACLyD,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRd,MAAO5C,EACP2D,SAAUlB,OAGd,cAACT,EAAD,CAAKuB,KAAK,SAAV,6B,QCtEAK,EAAiB,SAAC9C,GAAD,OAAWA,EAAMQ,SAASd,aAAaE,OACxDmD,EAAY,SAAC/C,GAAD,OAAWA,EAAMQ,SAASP,QAEtC+C,EAAsBC,YAC1B,CAACH,EAAgBC,IACjB,SAACvC,EAAUP,GACT,IAAMiD,EAAmBjD,EAAOmC,cAChC,OAAO5B,EAASP,QAAO,qBAAGhB,KACnBmD,cAAce,SAASD,SCR5BhC,EAAMJ,IAAOK,OAAV,uHAOHiC,EAAWtC,IAAOuC,KAAV,mDAIRC,EAAOxC,IAAOyC,GAAV,8ICuBKC,GA9BK,WAClB,IAAMhD,EAAWgB,YAAYsB,GACvBW,EAAkBjC,YAAYwB,GAE9BvB,EAAWC,cAOjB,OALEgC,qBAAU,WACVjC,ELR4B,uCAAM,WAAMA,GAAN,iBAAAa,EAAA,6DAClCb,EAAS1B,KADyB,kBAIPW,IAAMiD,IAAI,aAJH,gBAItBnB,EAJsB,EAItBA,KACRf,EAAS1B,EAA4ByC,IACrCf,EAAS1B,KANqB,kDAQ9B0B,EAAS1B,EAAA,OARqB,0DAAN,yDKSzB,CAAC0B,IAIJjB,EAASoD,OAAS,GAChB,6BACGH,EAAgBI,KAAI,WAAuBC,GAAvB,IAAG3E,EAAH,EAAGA,GAAIF,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACnB,eAACoE,EAAD,WACE,eAACF,EAAD,qBACMU,EAAI,EADV,SAEG7E,EAFH,KAEWC,KAEX,cAAC,EAAD,CAAKuD,KAAK,SAASsB,QAAS,kBAAMtC,ELGX,SAACtC,GAAD,8CAAQ,WAAMsC,GAAN,eAAAa,EAAA,6DACjC0B,EAAY7E,EAAG8E,WACrBxC,EAAS1B,KAF8B,kBAK7BW,IAAMwD,OAAN,oBAA0BF,IALG,OAMnCvC,EAAS1B,EAA8BZ,IACvCsC,EAAS1B,KAP0B,gDASnC0B,EAAS1B,EAAA,OAT0B,yDAAR,sDKHoBoE,CAAuChF,KAAlF,sBALSA,SCnBf6B,GAAQF,IAAOG,MAAV,2IAQLmD,GAAUtD,IAAOuC,KAAV,4FCeEgB,GAnBA,WACb,IAAMpE,EAASuB,YAAYuB,GACrBvC,EAAWgB,YAAYsB,GACvBrB,EAAWC,cAMjB,OAA2B,IAApBlB,EAASoD,OACd,eAAC,GAAD,mCAEE,uBAAOnB,KAAK,OAAOxD,KAAK,eAAe6C,MAAO7B,EAAQ4C,SAPnC,SAACjB,GACtBH,EAAS1B,EAA+B6B,EAAEC,OAAOC,cASjD,cAACsC,GAAD,kDCnBSE,GAAYxD,IAAOyD,IAAV,8CCiBPC,GAZH,WACV,OACE,eAACF,GAAD,WACE,2CACA,cAAC,EAAD,IACA,0CACA,cAAC,GAAD,IACA,cAAC,GAAD,QCRNG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUtE,MAAOA,EAAjB,SACE,cAAC,GAAD,QAGJuE,SAASC,eAAe,W","file":"static/js/main.5ecf8d7f.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"contacts/add\", ({ name, number, id }) => {\r\n  return {\r\n    payload: {\r\n      name,\r\n      number,\r\n      id,\r\n    },\r\n  };\r\n});\r\n\r\nconst getContacts = createAction(\"contacts/get\");\r\nconst deleteContact = createAction(\"contacts/delete\");\r\nconst filterContacts = createAction(\"contacts/filter\");\r\n\r\nconst fetchContactsRequest = createAction('contacts/fetchRequest')\r\nconst fetchContactsSuccess = createAction('contacts/fetchSuccess')\r\nconst fetchContactsError = createAction('contacts/fetchError')\r\n\r\nexport { addContact, getContacts, deleteContact, filterContacts, fetchContactsRequest, fetchContactsSuccess, fetchContactsError }","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport * as contactsActions from \"./contacts-actions\";\r\n\r\nconst InitialState = {\r\n  items: [],\r\n  isLoading: false,\r\n  error: \"\",\r\n};\r\n\r\nconst contactItems = createReducer(InitialState, {\r\n  [contactsActions.getContacts]: (state, {payload}) => ({...state, items: [...payload]}),\r\n  [contactsActions.addContact]: (state, { payload }) => ({ ...state, items: [...state.items, payload], }),\r\n  [contactsActions.deleteContact]: (state, { payload }) => ({ ...state, items: state.items.filter((elem) => elem.id !== payload), }),\r\n  [contactsActions.fetchContactsRequest]: state => ({ ...state, isLoading: true, }),\r\n  [contactsActions.fetchContactsSuccess]: state => ({ ...state, isLoading: false, }),\r\n  [contactsActions.fetchContactsError]: (state, {payload}) => ({...state, error: payload,}),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [contactsActions.filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contactItems,\r\n  filter,\r\n});\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from \"./Contacts/contacts-reduser\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport { store };\r\n","import axios from \"axios\";\r\nimport * as contactsActions from './contacts-actions'\r\n\r\naxios.defaults.baseURL = \"http://localhost:3030\";\r\n\r\nexport const fetchGetContacts = () => async dispatch => {\r\n    dispatch(contactsActions.fetchContactsRequest())\r\n\r\n    try {\r\n        const { data } = await axios.get('/contacts')\r\n        dispatch(contactsActions.getContacts(data))\r\n        dispatch(contactsActions.fetchContactsSuccess())\r\n    } catch (error) {\r\n        dispatch(contactsActions.fetchContactsError(error))\r\n    }\r\n};\r\n\r\nexport const fetchPostContacts = (contact) => async dispatch => {\r\n    dispatch(contactsActions.fetchContactsRequest())\r\n\r\n    try {\r\n        const { data } = await axios.post('/contacts', contact)\r\n        dispatch(contactsActions.addContact(data))\r\n        dispatch(contactsActions.fetchContactsSuccess())\r\n    } catch (error) {\r\n        dispatch(contactsActions.fetchContactsError(error))\r\n    }\r\n};\r\n\r\nexport const fetchDeleteContacts = (id) => async dispatch => {\r\n    const contactId = id.toString();\r\n    dispatch(contactsActions.fetchContactsRequest())\r\n\r\n    try {\r\n        await axios.delete(`/contacts/${contactId}`)\r\n        dispatch(contactsActions.deleteContact(id))\r\n        dispatch(contactsActions.fetchContactsSuccess())\r\n    } catch (error) {\r\n        dispatch(contactsActions.fetchContactsError(error))\r\n    }\r\n};\r\n","import styled from \"@emotion/styled\";\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  padding: 20px;\n  border: 3px solid #212121;\n`;\n\nconst Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 50%;\n  margin-bottom: 30px;\n  font-size: 20px;\n  font-weight: 800;\n`;\n\nconst Btn = styled.button`\n  width: 100px;\n  padding: 5px;\n  font-weight: 600;\n  background-color: #5d5dff;\n  border-radius: 5px;\n`;\n\nexport { Form, Label, Btn };\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as contactsOperations from '../../Redux/Contacts/contacts-operations'\n\nimport { Form, Label, Btn } from \"./ContactForm.styles\";\n\nconst ContactForm = () => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const contacts = useSelector((state) => state.contacts.contactItems.items);\n\n  const dispatch = useDispatch();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (contacts.find((contact) => contact.name.toLowerCase() === name.toLowerCase())) {\n      alert(`${name} is already in contacts`);\n      reset();\n      return;\n    }\n\n    dispatch(contactsOperations.fetchPostContacts({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n          value={name}\n        />\n      </Label>\n      <Label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </Label>\n      <Btn type=\"submit\">Add contact</Btn>\n    </Form>\n  );\n}\n\nexport default ContactForm;\n","import { createSelector } from \"reselect\";\r\n\r\nconst getAllContacts = (state) => state.contacts.contactItems.items;\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nconst getFilteredContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase()\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter))\r\n  }\r\n);\r\n\r\nexport {getAllContacts, getFilter, getFilteredContacts}\r\n\r\n","import styled from \"@emotion/styled\";\n\nconst Btn = styled.button`\n  padding: 3px;\n  font-weight: 600;\n  background-color: #5d5dff;\n  border-radius: 5px;\n`;\n\nconst ItemText = styled.span`\n  margin-right: 30px;\n`;\n\nconst Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  width: 350px;\n  font-size: 18px;\n`;\n\nexport { Btn, ItemText, Item };\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as contactsOperations from '../../Redux/Contacts/contacts-operations';\nimport { getAllContacts, getFilteredContacts } from '../../Redux/Contacts/contacts-selectors'\nimport { Btn, ItemText, Item } from \"./ContactListStyles\";\n\nconst ContactList = () => {\n  const contacts = useSelector(getAllContacts);\n  const visibleContacts = useSelector(getFilteredContacts)\n\n  const dispatch = useDispatch();\n\n    useEffect(() => {\n    dispatch(contactsOperations.fetchGetContacts());\n    }, [dispatch]);\n  \n\n  return (\n    contacts.length > 0 && (\n      <ul>\n        {visibleContacts.map(({ id, name, number }, i) => (\n          <Item key={id}>\n            <ItemText>\n              {`${i + 1})    `}\n              {name}: {number}\n            </ItemText>\n            <Btn type=\"button\" onClick={() => dispatch(contactsOperations.fetchDeleteContacts(id))}>\n              Delete\n            </Btn>\n          </Item>\n        ))}\n      </ul>\n    )\n  );\n};\n\nexport default ContactList;\n","import styled from \"@emotion/styled\";\n\nconst Label = styled.label`\n  display: flex;\n  justify-content: space-between;\n  width: 380px;\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nconst Message = styled.span`\n  font-size: 18px;\n  font-weight: 400;\n  font-style: italic;\n`;\n\nexport { Label, Message };\n","import { useSelector, useDispatch } from \"react-redux\";\nimport * as contactsActions from '../../Redux/Contacts/contacts-actions'\nimport { getAllContacts, getFilter } from '../../Redux/Contacts/contacts-selectors'\n\nimport { Label, Message } from \"./Filter.styles\";\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const contacts = useSelector(getAllContacts);\n  const dispatch = useDispatch();\n\n    const handleChange = (e) => {\n    dispatch(contactsActions.filterContacts(e.target.value));\n  };\n\n  return contacts.length !== 0 ? (\n    <Label>\n      Find contacts by Name\n      <input type=\"text\" name=\"Find contact\" value={filter} onChange={handleChange} />\n    </Label>\n  ) : (\n    <Message>Your Phonebook don`t have contacts</Message>\n  );\n};\n\nexport default Filter;\n","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\n  padding: 20px;\n`;\n","import React from \"react\";\n\nimport ContactForm from \"../ContactForm\";\nimport ContactList from \"../ContactList\";\nimport Filter from \"../Filter\";\nimport { Container } from \"./App.styles\";\n\nconst App = () => {\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm      />\n      <h2>Contacts</h2>\n      <Filter/>\n      <ContactList/>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./Redux/store\";\nimport App from \"./Components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}